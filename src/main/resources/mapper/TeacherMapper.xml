<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.gqzdev.learn.dao.TeacherMapper">
	<resultMap id="BaseResultMap" type="com.gqzdev.learn.model.Teacher">
		<id column="id" property="id" jdbcType="INTEGER" />
		<result column="account" property="account" jdbcType="VARCHAR" />
		<result column="password" property="password" jdbcType="VARCHAR" />
		<result column="name" property="name" jdbcType="VARCHAR" />
		<result column="gender" property="gender" jdbcType="INTEGER" />
		<result column="num" property="num" jdbcType="VARCHAR" />
		<result column="college_id" property="collegeId" jdbcType="INTEGER" />
		<result column="course_id" property="courseId" jdbcType="INTEGER" />
		<result column="telphone" property="telphone" jdbcType="VARCHAR" />
		<result column="id_card_no" property="idCardNo" jdbcType="VARCHAR" />
		<result column="state" property="state" jdbcType="VARCHAR" />
		<result column="isDel" property="isdel" jdbcType="INTEGER" />
	</resultMap>
	<sql id="Example_Where_Clause">
		<where>
			<foreach collection="oredCriteria" item="criteria" separator="or">
				<if test="criteria.valid">
					<trim prefix="(" suffix=")" prefixOverrides="and">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value} and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach collection="criterion.value" item="listItem"
										open="(" close=")" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Update_By_Example_Where_Clause">
		<where>
			<foreach collection="example.oredCriteria" item="criteria"
				separator="or">
				<if test="criteria.valid">
					<trim prefix="(" suffix=")" prefixOverrides="and">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value} and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach collection="criterion.value" item="listItem"
										open="(" close=")" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Base_Column_List">
		id, account, password, name, gender, num, college_id, course_id,
		telphone, id_card_no,
		state, isDel
	</sql>
	<select id="selectByExample" resultMap="BaseResultMap"
		parameterType="com.gqzdev.learn.model.TeacherExample">
		select
		<if test="distinct">
			distinct
		</if>
		<include refid="Base_Column_List" />
		from teacher
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
		<if test="orderByClause != null">
			order by ${orderByClause}
		</if>
	</select>
	<select id="selectByPrimaryKey" resultMap="BaseResultMap"
		parameterType="java.lang.Integer">
		select
		<include refid="Base_Column_List" />
		from teacher
		where id = #{id,jdbcType=INTEGER}
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		delete from teacher
		where id = #{id,jdbcType=INTEGER}
	</delete>
	<delete id="deleteByExample" parameterType="com.gqzdev.learn.model.TeacherExample">
		delete from teacher
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</delete>
	<insert id="insert" parameterType="com.gqzdev.learn.model.Teacher">
		insert into teacher (id, account, password,
		name, gender, num,
		college_id, course_id, telphone,
		id_card_no, state, isDel
		)
		values (#{id,jdbcType=INTEGER}, #{account,jdbcType=VARCHAR},
		#{password,jdbcType=VARCHAR},
		#{name,jdbcType=VARCHAR}, #{gender,jdbcType=INTEGER}, #{num,jdbcType=VARCHAR},
		#{collegeId,jdbcType=INTEGER}, #{courseId,jdbcType=INTEGER},
		#{telphone,jdbcType=VARCHAR},
		#{idCardNo,jdbcType=VARCHAR}, #{state,jdbcType=VARCHAR}, #{isdel,jdbcType=INTEGER}
		)
	</insert>
	<insert id="insertSelective" parameterType="com.gqzdev.learn.model.Teacher">
		insert into teacher
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="id != null">
				id,
			</if>
			<if test="account != null">
				account,
			</if>
			<if test="password != null">
				password,
			</if>
			<if test="name != null">
				name,
			</if>
			<if test="gender != null">
				gender,
			</if>
			<if test="num != null">
				num,
			</if>
			<if test="collegeId != null">
				college_id,
			</if>
			<if test="courseId != null">
				course_id,
			</if>
			<if test="telphone != null">
				telphone,
			</if>
			<if test="idCardNo != null">
				id_card_no,
			</if>
			<if test="state != null">
				state,
			</if>
			<if test="isdel != null">
				isDel,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="id != null">
				#{id,jdbcType=INTEGER},
			</if>
			<if test="account != null">
				#{account,jdbcType=VARCHAR},
			</if>
			<if test="password != null">
				#{password,jdbcType=VARCHAR},
			</if>
			<if test="name != null">
				#{name,jdbcType=VARCHAR},
			</if>
			<if test="gender != null">
				#{gender,jdbcType=INTEGER},
			</if>
			<if test="num != null">
				#{num,jdbcType=VARCHAR},
			</if>
			<if test="collegeId != null">
				#{collegeId,jdbcType=INTEGER},
			</if>
			<if test="courseId != null">
				#{courseId,jdbcType=INTEGER},
			</if>
			<if test="telphone != null">
				#{telphone,jdbcType=VARCHAR},
			</if>
			<if test="idCardNo != null">
				#{idCardNo,jdbcType=VARCHAR},
			</if>
			<if test="state != null">
				#{state,jdbcType=VARCHAR},
			</if>
			<if test="isdel != null">
				#{isdel,jdbcType=INTEGER},
			</if>
		</trim>
	</insert>
	<select id="countByExample" parameterType="com.gqzdev.learn.model.TeacherExample"
		resultType="java.lang.Integer">
		select count(*) from teacher
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</select>
	<update id="updateByExampleSelective" parameterType="map">
		update teacher
		<set>
			<if test="record.id != null">
				id = #{record.id,jdbcType=INTEGER},
			</if>
			<if test="record.account != null">
				account = #{record.account,jdbcType=VARCHAR},
			</if>
			<if test="record.password != null">
				password = #{record.password,jdbcType=VARCHAR},
			</if>
			<if test="record.name != null">
				name = #{record.name,jdbcType=VARCHAR},
			</if>
			<if test="record.gender != null">
				gender = #{record.gender,jdbcType=INTEGER},
			</if>
			<if test="record.num != null">
				num = #{record.num,jdbcType=VARCHAR},
			</if>
			<if test="record.collegeId != null">
				college_id = #{record.collegeId,jdbcType=INTEGER},
			</if>
			<if test="record.courseId != null">
				course_id = #{record.courseId,jdbcType=INTEGER},
			</if>
			<if test="record.telphone != null">
				telphone = #{record.telphone,jdbcType=VARCHAR},
			</if>
			<if test="record.idCardNo != null">
				id_card_no = #{record.idCardNo,jdbcType=VARCHAR},
			</if>
			<if test="record.state != null">
				state = #{record.state,jdbcType=VARCHAR},
			</if>
			<if test="record.isdel != null">
				isDel = #{record.isdel,jdbcType=INTEGER},
			</if>
		</set>
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByExample" parameterType="map">
		update teacher
		set id = #{record.id,jdbcType=INTEGER},
		account = #{record.account,jdbcType=VARCHAR},
		password = #{record.password,jdbcType=VARCHAR},
		name = #{record.name,jdbcType=VARCHAR},
		gender = #{record.gender,jdbcType=INTEGER},
		num = #{record.num,jdbcType=VARCHAR},
		college_id = #{record.collegeId,jdbcType=INTEGER},
		course_id = #{record.courseId,jdbcType=INTEGER},
		telphone = #{record.telphone,jdbcType=VARCHAR},
		id_card_no = #{record.idCardNo,jdbcType=VARCHAR},
		state = #{record.state,jdbcType=VARCHAR},
		isDel = #{record.isdel,jdbcType=INTEGER}
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByPrimaryKeySelective" parameterType="com.gqzdev.learn.model.Teacher">
		update teacher
		<set>
			<if test="account != null">
				account = #{account,jdbcType=VARCHAR},
			</if>
			<if test="password != null">
				password = #{password,jdbcType=VARCHAR},
			</if>
			<if test="name != null">
				name = #{name,jdbcType=VARCHAR},
			</if>
			<if test="gender != null">
				gender = #{gender,jdbcType=INTEGER},
			</if>
			<if test="num != null">
				num = #{num,jdbcType=VARCHAR},
			</if>
			<if test="collegeId != null">
				college_id = #{collegeId,jdbcType=INTEGER},
			</if>
			<if test="courseId != null">
				course_id = #{courseId,jdbcType=INTEGER},
			</if>
			<if test="telphone != null">
				telphone = #{telphone,jdbcType=VARCHAR},
			</if>
			<if test="idCardNo != null">
				id_card_no = #{idCardNo,jdbcType=VARCHAR},
			</if>
			<if test="state != null">
				state = #{state,jdbcType=VARCHAR},
			</if>
			<if test="isdel != null">
				isDel = #{isdel,jdbcType=INTEGER},
			</if>
		</set>
		where id = #{id,jdbcType=INTEGER}
	</update>
	<update id="updateByPrimaryKey" parameterType="com.gqzdev.learn.model.Teacher">
		update teacher
		set account = #{account,jdbcType=VARCHAR},
		password = #{password,jdbcType=VARCHAR},
		name = #{name,jdbcType=VARCHAR},
		gender = #{gender,jdbcType=INTEGER},
		num = #{num,jdbcType=VARCHAR},
		college_id = #{collegeId,jdbcType=INTEGER},
		course_id = #{courseId,jdbcType=INTEGER},
		telphone = #{telphone,jdbcType=VARCHAR},
		id_card_no = #{idCardNo,jdbcType=VARCHAR},
		state = #{state,jdbcType=VARCHAR},
		isDel = #{isdel,jdbcType=INTEGER}
		where id = #{id,jdbcType=INTEGER}
	</update>

	<!-- 自定义 -->
	<insert id="saveEntity" parameterType="com.gqzdev.learn.model.Teacher">
		INSERT into teacher (name, num, college_id, telphone, id_card_no, gender,
		account, password, course_id) VALUES (#{name}, #{num}, #{collegeId},
		#{telphone}, #{idCardNo}, #{gender}, #{account}, #{password},
		#{courseId})
	</insert>

	<select id="searchEntity" resultMap="BaseResultMap">
		SELECT t.id, t.name, t.num, c.name AS collegeName, t.telphone, t.id_card_no,
		t.course_id, (SELECT name FROM course WHERE id = t.course_id) AS
		courseName, CASE gender WHEN 0 THEN "男" ELSE "女" END AS genderName,t.gender,
		t.account FROM teacher AS t JOIN college AS c ON t.college_id = c.id
	</select>
	
	<!-- 模糊查询  by name-->
	<select id="searchTeacherByName" parameterType="String" resultMap="BaseResultMap">
		SELECT t.id, t.name, t.num, c.name AS collegeName, t.telphone, t.id_card_no,
		t.course_id, (SELECT name FROM course WHERE id = t.course_id) AS
		courseName, CASE gender WHEN 0 THEN "男" ELSE "女" END AS genderName,t.gender,
		t.account FROM teacher AS t JOIN college AS c ON t.college_id = c.id
		where t.name LIKE CONCAT(CONCAT('%',#{name,jdbcType=VARCHAR}),'%')
	</select>
	
	<!-- 模糊查询  by collegeId-->
	<select id="searchTeacherByCollegeId" parameterType="int" resultMap="BaseResultMap">
		SELECT t.id, t.name, t.num, c.name AS collegeName, t.telphone, t.id_card_no,
		t.course_id, (SELECT name FROM course WHERE id = t.course_id) AS
		courseName, CASE gender WHEN 0 THEN "男" ELSE "女" END AS genderName,t.gender,
		t.account FROM teacher AS t JOIN college AS c ON t.college_id = c.id
		where t.college_id= #{id}
	</select>
	
	<!-- 模糊查询  by collegeId & name-->
	<select id="searchTeacherByTerm" resultMap="BaseResultMap">
		SELECT t.id, t.name, t.num, c.name AS collegeName, t.telphone, t.id_card_no,
		t.course_id, (SELECT name FROM course WHERE id = t.course_id) AS
		courseName, CASE gender WHEN 0 THEN "男" ELSE "女" END AS genderName,t.gender,
		t.account FROM teacher AS t JOIN college AS c ON t.college_id = c.id
		where t.college_id = #{collegeId,jdbcType=INTEGER}	
		AND t.name LIKE CONCAT(CONCAT('%',#{name,jdbcType=VARCHAR}),'%')
	</select>

	<select id="getEntityById" parameterType="int" resultMap="BaseResultMap">
		SELECT * FROM teacher WHERE id = #{id}
	</select>

	<delete id="deleteEntity" parameterType="int">
		DELETE FROM teacher WHERE id = #{id}
	</delete>

	<delete id="updateEntity" parameterType="com.gqzdev.learn.model.Teacher">
		UPDATE teacher SET name = #{name}, num = #{num}, college_id = #{collegeId},
		telphone = #{telphone}, id_card_no = #{idCardNo}, gender = #{gender},
		account = #{account}, password = #{password}, course_id = #{courseId}
		WHERE id = #{id}
	</delete>

	<select id="searchEntityByAccount" parameterType="map"
		resultMap="BaseResultMap">
		SELECT * FROM teacher WHERE account = #{account} AND password = #{password}
	</select>

</mapper>