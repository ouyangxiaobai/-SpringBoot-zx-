<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.gqzdev.learn.dao.CourseMapper">
	<resultMap id="BaseResultMap" type="com.gqzdev.learn.model.Course">
		<id column="id" property="id" jdbcType="INTEGER" />
		<result column="name" property="name" jdbcType="VARCHAR" />
		<result column="college_id" property="collegeId" jdbcType="INTEGER" />
		<result column="num" property="num" jdbcType="VARCHAR" />
		<result column="state" property="state" jdbcType="VARCHAR" />
		<result column="isDel" property="isdel" jdbcType="INTEGER" />
	</resultMap>
	<resultMap id="ResultMapWithBLOBs" type="com.gqzdev.learn.model.Course"
		extends="BaseResultMap">
		<result column="intro" property="intro" jdbcType="LONGVARCHAR" />
	</resultMap>
	<sql id="Example_Where_Clause">
		<where>
			<foreach collection="oredCriteria" item="criteria" separator="or">
				<if test="criteria.valid">
					<trim prefix="(" suffix=")" prefixOverrides="and">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value} and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach collection="criterion.value" item="listItem"
										open="(" close=")" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Update_By_Example_Where_Clause">
		<where>
			<foreach collection="example.oredCriteria" item="criteria"
				separator="or">
				<if test="criteria.valid">
					<trim prefix="(" suffix=")" prefixOverrides="and">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value} and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach collection="criterion.value" item="listItem"
										open="(" close=")" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Base_Column_List">
		id, name, college_id, num, state, isDel
	</sql>
	<sql id="Blob_Column_List">
		intro
	</sql>
	<select id="selectByExampleWithBLOBs" resultMap="ResultMapWithBLOBs"
		parameterType="com.gqzdev.learn.model.CourseExample">
		select
		<if test="distinct">
			distinct
		</if>
		<include refid="Base_Column_List" />
		,
		<include refid="Blob_Column_List" />
		from course
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
		<if test="orderByClause != null">
			order by ${orderByClause}
		</if>
	</select>
	<select id="selectByExample" resultMap="BaseResultMap"
		parameterType="com.gqzdev.learn.model.CourseExample">
		select
		<if test="distinct">
			distinct
		</if>
		<include refid="Base_Column_List" />
		from course
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
		<if test="orderByClause != null">
			order by ${orderByClause}
		</if>
	</select>
	<select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs"
		parameterType="java.lang.Integer">
		select
		<include refid="Base_Column_List" />
		,
		<include refid="Blob_Column_List" />
		from course
		where id = #{id,jdbcType=INTEGER}
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		delete from course
		where id = #{id,jdbcType=INTEGER}
	</delete>
	<delete id="deleteByExample" parameterType="com.gqzdev.learn.model.CourseExample">
		delete from course
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</delete>
	<insert id="insert" parameterType="com.gqzdev.learn.model.Course">
		insert into course (id, name, college_id,
		num, state, isDel,
		intro)
		values (#{id,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR},
		#{collegeId,jdbcType=INTEGER},
		#{num,jdbcType=VARCHAR}, #{state,jdbcType=VARCHAR}, #{isdel,jdbcType=INTEGER},
		#{intro,jdbcType=LONGVARCHAR})
	</insert>
	<insert id="insertSelective" parameterType="com.gqzdev.learn.model.Course">
		insert into course
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="id != null">
				id,
			</if>
			<if test="name != null">
				name,
			</if>
			<if test="collegeId != null">
				college_id,
			</if>
			<if test="num != null">
				num,
			</if>
			<if test="state != null">
				state,
			</if>
			<if test="isdel != null">
				isDel,
			</if>
			<if test="intro != null">
				intro,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="id != null">
				#{id,jdbcType=INTEGER},
			</if>
			<if test="name != null">
				#{name,jdbcType=VARCHAR},
			</if>
			<if test="collegeId != null">
				#{collegeId,jdbcType=INTEGER},
			</if>
			<if test="num != null">
				#{num,jdbcType=VARCHAR},
			</if>
			<if test="state != null">
				#{state,jdbcType=VARCHAR},
			</if>
			<if test="isdel != null">
				#{isdel,jdbcType=INTEGER},
			</if>
			<if test="intro != null">
				#{intro,jdbcType=LONGVARCHAR},
			</if>
		</trim>
	</insert>
	<select id="countByExample" parameterType="com.gqzdev.learn.model.CourseExample"
		resultType="java.lang.Integer">
		select count(*) from course
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</select>
	<update id="updateByExampleSelective" parameterType="map">
		update course
		<set>
			<if test="record.id != null">
				id = #{record.id,jdbcType=INTEGER},
			</if>
			<if test="record.name != null">
				name = #{record.name,jdbcType=VARCHAR},
			</if>
			<if test="record.collegeId != null">
				college_id = #{record.collegeId,jdbcType=INTEGER},
			</if>
			<if test="record.num != null">
				num = #{record.num,jdbcType=VARCHAR},
			</if>
			<if test="record.state != null">
				state = #{record.state,jdbcType=VARCHAR},
			</if>
			<if test="record.isdel != null">
				isDel = #{record.isdel,jdbcType=INTEGER},
			</if>
			<if test="record.intro != null">
				intro = #{record.intro,jdbcType=LONGVARCHAR},
			</if>
		</set>
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByExampleWithBLOBs" parameterType="map">
		update course
		set id = #{record.id,jdbcType=INTEGER},
		name = #{record.name,jdbcType=VARCHAR},
		college_id = #{record.collegeId,jdbcType=INTEGER},
		num = #{record.num,jdbcType=VARCHAR},
		state = #{record.state,jdbcType=VARCHAR},
		isDel = #{record.isdel,jdbcType=INTEGER},
		intro = #{record.intro,jdbcType=LONGVARCHAR}
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByExample" parameterType="map">
		update course
		set id = #{record.id,jdbcType=INTEGER},
		name = #{record.name,jdbcType=VARCHAR},
		college_id = #{record.collegeId,jdbcType=INTEGER},
		num = #{record.num,jdbcType=VARCHAR},
		state = #{record.state,jdbcType=VARCHAR},
		isDel = #{record.isdel,jdbcType=INTEGER}
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByPrimaryKeySelective" parameterType="com.gqzdev.learn.model.Course">
		update course
		<set>
			<if test="name != null">
				name = #{name,jdbcType=VARCHAR},
			</if>
			<if test="collegeId != null">
				college_id = #{collegeId,jdbcType=INTEGER},
			</if>
			<if test="num != null">
				num = #{num,jdbcType=VARCHAR},
			</if>
			<if test="state != null">
				state = #{state,jdbcType=VARCHAR},
			</if>
			<if test="isdel != null">
				isDel = #{isdel,jdbcType=INTEGER},
			</if>
			<if test="intro != null">
				intro = #{intro,jdbcType=LONGVARCHAR},
			</if>
		</set>
		where id = #{id,jdbcType=INTEGER}
	</update>
	<update id="updateByPrimaryKeyWithBLOBs" parameterType="com.gqzdev.learn.model.Course">
		update course
		set name = #{name,jdbcType=VARCHAR},
		college_id = #{collegeId,jdbcType=INTEGER},
		num = #{num,jdbcType=VARCHAR},
		state = #{state,jdbcType=VARCHAR},
		isDel = #{isdel,jdbcType=INTEGER},
		intro = #{intro,jdbcType=LONGVARCHAR}
		where id = #{id,jdbcType=INTEGER}
	</update>
	<update id="updateByPrimaryKey" parameterType="com.gqzdev.learn.model.Course">
		update course
		set name = #{name,jdbcType=VARCHAR},
		college_id = #{collegeId,jdbcType=INTEGER},
		num = #{num,jdbcType=VARCHAR},
		state = #{state,jdbcType=VARCHAR},
		isDel = #{isdel,jdbcType=INTEGER}
		where id = #{id,jdbcType=INTEGER}
	</update>

	<!-- 自定义 -->
	<insert id="saveEntity" parameterType="com.gqzdev.learn.model.Course">
		INSERT into course (name, num, college_id, intro) VALUES (#{name}, #{num},
		#{collegeId}, #{intro})
	</insert>

	<select id="searchEntity" resultMap="BaseResultMap">
		SELECT u.id, u.name, u.num, c.name AS collegeName, u.intro FROM course AS u
		JOIN college AS c ON u.college_id = c.id
	</select>

	<select id="getEntityById" parameterType="int" resultMap="BaseResultMap">
		SELECT * FROM course WHERE id = #{id}
	</select>

	<delete id="deleteEntity" parameterType="int">
		DELETE FROM course WHERE id = #{id}
	</delete>

	<delete id="updateEntity" parameterType="com.gqzdev.learn.model.Course">
		UPDATE course SET name = #{name}, num = #{num}, college_id = #{collegeId},
		intro = #{intro} WHERE id = #{id}
	</delete>
</mapper>