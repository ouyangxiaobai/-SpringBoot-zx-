<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.gqzdev.learn.dao.StudentTaskMapper">
	<resultMap id="BaseResultMap" type="com.gqzdev.learn.model.StudentTask">
		<id column="id" property="id" jdbcType="INTEGER" />
		<result column="student_id" property="studentId" jdbcType="INTEGER" />
		<result column="task_id" property="taskId" jdbcType="INTEGER" />
		<result column="score" property="score" jdbcType="INTEGER" />
		<result column="record_time" property="recordTime" jdbcType="TIMESTAMP" />
		<result column="state" property="state" jdbcType="VARCHAR" />
		<result column="isDel" property="isdel" jdbcType="INTEGER" />
	</resultMap>
	<sql id="Example_Where_Clause">
		<where>
			<foreach collection="oredCriteria" item="criteria" separator="or">
				<if test="criteria.valid">
					<trim prefix="(" suffix=")" prefixOverrides="and">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value} and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach collection="criterion.value" item="listItem"
										open="(" close=")" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Update_By_Example_Where_Clause">
		<where>
			<foreach collection="example.oredCriteria" item="criteria"
				separator="or">
				<if test="criteria.valid">
					<trim prefix="(" suffix=")" prefixOverrides="and">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value} and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach collection="criterion.value" item="listItem"
										open="(" close=")" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Base_Column_List">
		id, student_id, task_id, score, record_time, state, isDel
	</sql>
	<select id="selectByExample" resultMap="BaseResultMap"
		parameterType="com.gqzdev.learn.model.StudentTaskExample">
		select
		<if test="distinct">
			distinct
		</if>
		<include refid="Base_Column_List" />
		from student_task
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
		<if test="orderByClause != null">
			order by ${orderByClause}
		</if>
	</select>
	<select id="selectByPrimaryKey" resultMap="BaseResultMap"
		parameterType="java.lang.Integer">
		select
		<include refid="Base_Column_List" />
		from student_task
		where id = #{id,jdbcType=INTEGER}
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		delete from student_task
		where id = #{id,jdbcType=INTEGER}
	</delete>
	<delete id="deleteByExample" parameterType="com.gqzdev.learn.model.StudentTaskExample">
		delete from student_task
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</delete>
	<insert id="insert" parameterType="com.gqzdev.learn.model.StudentTask">
		insert into student_task (id, student_id, task_id,
		score, record_time, state,
		isDel)
		values (#{id,jdbcType=INTEGER}, #{studentId,jdbcType=INTEGER},
		#{taskId,jdbcType=INTEGER},
		#{score,jdbcType=INTEGER}, #{recordTime,jdbcType=TIMESTAMP}, #{state,jdbcType=VARCHAR},
		#{isdel,jdbcType=INTEGER})
	</insert>
	<insert id="insertSelective" parameterType="com.gqzdev.learn.model.StudentTask">
		insert into student_task
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="id != null">
				id,
			</if>
			<if test="studentId != null">
				student_id,
			</if>
			<if test="taskId != null">
				task_id,
			</if>
			<if test="score != null">
				score,
			</if>
			<if test="recordTime != null">
				record_time,
			</if>
			<if test="state != null">
				state,
			</if>
			<if test="isdel != null">
				isDel,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="id != null">
				#{id,jdbcType=INTEGER},
			</if>
			<if test="studentId != null">
				#{studentId,jdbcType=INTEGER},
			</if>
			<if test="taskId != null">
				#{taskId,jdbcType=INTEGER},
			</if>
			<if test="score != null">
				#{score,jdbcType=INTEGER},
			</if>
			<if test="recordTime != null">
				#{recordTime,jdbcType=TIMESTAMP},
			</if>
			<if test="state != null">
				#{state,jdbcType=VARCHAR},
			</if>
			<if test="isdel != null">
				#{isdel,jdbcType=INTEGER},
			</if>
		</trim>
	</insert>
	<select id="countByExample" parameterType="com.gqzdev.learn.model.StudentTaskExample"
		resultType="java.lang.Integer">
		select count(*) from student_task
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</select>
	<update id="updateByExampleSelective" parameterType="map">
		update student_task
		<set>
			<if test="record.id != null">
				id = #{record.id,jdbcType=INTEGER},
			</if>
			<if test="record.studentId != null">
				student_id = #{record.studentId,jdbcType=INTEGER},
			</if>
			<if test="record.taskId != null">
				task_id = #{record.taskId,jdbcType=INTEGER},
			</if>
			<if test="record.score != null">
				score = #{record.score,jdbcType=INTEGER},
			</if>
			<if test="record.recordTime != null">
				record_time = #{record.recordTime,jdbcType=TIMESTAMP},
			</if>
			<if test="record.state != null">
				state = #{record.state,jdbcType=VARCHAR},
			</if>
			<if test="record.isdel != null">
				isDel = #{record.isdel,jdbcType=INTEGER},
			</if>
		</set>
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByExample" parameterType="map">
		update student_task
		set id = #{record.id,jdbcType=INTEGER},
		student_id = #{record.studentId,jdbcType=INTEGER},
		task_id = #{record.taskId,jdbcType=INTEGER},
		score = #{record.score,jdbcType=INTEGER},
		record_time = #{record.recordTime,jdbcType=TIMESTAMP},
		state = #{record.state,jdbcType=VARCHAR},
		isDel = #{record.isdel,jdbcType=INTEGER}
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByPrimaryKeySelective" parameterType="com.gqzdev.learn.model.StudentTask">
		update student_task
		<set>
			<if test="studentId != null">
				student_id = #{studentId,jdbcType=INTEGER},
			</if>
			<if test="taskId != null">
				task_id = #{taskId,jdbcType=INTEGER},
			</if>
			<if test="score != null">
				score = #{score,jdbcType=INTEGER},
			</if>
			<if test="recordTime != null">
				record_time = #{recordTime,jdbcType=TIMESTAMP},
			</if>
			<if test="state != null">
				state = #{state,jdbcType=VARCHAR},
			</if>
			<if test="isdel != null">
				isDel = #{isdel,jdbcType=INTEGER},
			</if>
		</set>
		where id = #{id,jdbcType=INTEGER}
	</update>
	<update id="updateByPrimaryKey" parameterType="com.gqzdev.learn.model.StudentTask">
		update student_task
		set student_id = #{studentId,jdbcType=INTEGER},
		task_id = #{taskId,jdbcType=INTEGER},
		score = #{score,jdbcType=INTEGER},
		record_time = #{recordTime,jdbcType=TIMESTAMP},
		state = #{state,jdbcType=VARCHAR},
		isDel = #{isdel,jdbcType=INTEGER}
		where id = #{id,jdbcType=INTEGER}
	</update>

	<!-- 自定义 -->
	<insert id="saveEntity" parameterType="com.gqzdev.learn.model.Student">
		INSERT into student_task (student_id, task_id, score, record_time) VALUES
		(#{studentId}, #{taskId}, #{score}, #{recordTime})
	</insert>

	<select id="searchEntity" resultMap="BaseResultMap">
		SELECT t.id, t.record_time, t.score, (SELECT name FROM student WHERE id =
		t.student_id) AS studentName, (SELECT c.name FROM task AS t1 JOIN
		course AS c ON t1.course_id = c.id WHERE t1.id = t.task_id) AS
		taskName FROM student_task AS t
	</select>

	<select id="searchEntityByStuId" parameterType="int" resultMap="BaseResultMap">
		SELECT t.id, t.record_time, task_id,t.score, (SELECT name FROM student WHERE
		id = t.student_id) AS studentName, (SELECT c.name FROM task AS t1 JOIN
		course AS c ON t1.course_id = c.id WHERE t1.id = t.task_id) AS
		taskName FROM student_task AS t WHERE t.student_id = #{stuId}
	</select>
</mapper>