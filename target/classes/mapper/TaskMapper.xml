<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.gqzdev.learn.dao.TaskMapper">
	<resultMap id="BaseResultMap" type="com.gqzdev.learn.model.Task">
		<id column="id" property="id" jdbcType="INTEGER" />
		<result column="teacher_id" property="teacherId" jdbcType="INTEGER" />
		<result column="course_id" property="courseId" jdbcType="INTEGER" />
		<result column="record_time" property="recordTime" jdbcType="TIMESTAMP" />
		<result column="state" property="state" jdbcType="VARCHAR" />
		<result column="isDel" property="isdel" jdbcType="INTEGER" />
	</resultMap>
	<sql id="Example_Where_Clause">
		<where>
			<foreach collection="oredCriteria" item="criteria" separator="or">
				<if test="criteria.valid">
					<trim prefix="(" suffix=")" prefixOverrides="and">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value} and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach collection="criterion.value" item="listItem"
										open="(" close=")" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Update_By_Example_Where_Clause">
		<where>
			<foreach collection="example.oredCriteria" item="criteria"
				separator="or">
				<if test="criteria.valid">
					<trim prefix="(" suffix=")" prefixOverrides="and">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value} and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach collection="criterion.value" item="listItem"
										open="(" close=")" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Base_Column_List">
		id, teacher_id, course_id, record_time, state, isDel
	</sql>
	<select id="selectByExample" resultMap="BaseResultMap"
		parameterType="com.gqzdev.learn.model.TaskExample">
		select
		<if test="distinct">
			distinct
		</if>
		<include refid="Base_Column_List" />
		from task
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
		<if test="orderByClause != null">
			order by ${orderByClause}
		</if>
	</select>
	<select id="selectByPrimaryKey" resultMap="BaseResultMap"
		parameterType="java.lang.Integer">
		select
		<include refid="Base_Column_List" />
		from task
		where id = #{id,jdbcType=INTEGER}
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		delete from task
		where id = #{id,jdbcType=INTEGER}
	</delete>
	<delete id="deleteByExample" parameterType="com.gqzdev.learn.model.TaskExample">
		delete from task
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</delete>
	<insert id="insert" parameterType="com.gqzdev.learn.model.Task">
		insert into task (id, teacher_id, course_id,
		record_time, state, isDel
		)
		values (#{id,jdbcType=INTEGER}, #{teacherId,jdbcType=INTEGER},
		#{courseId,jdbcType=INTEGER},
		#{recordTime,jdbcType=TIMESTAMP}, #{state,jdbcType=VARCHAR}, #{isdel,jdbcType=INTEGER}
		)
	</insert>
	<insert id="insertSelective" parameterType="com.gqzdev.learn.model.Task">
		insert into task
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="id != null">
				id,
			</if>
			<if test="teacherId != null">
				teacher_id,
			</if>
			<if test="courseId != null">
				course_id,
			</if>
			<if test="recordTime != null">
				record_time,
			</if>
			<if test="state != null">
				state,
			</if>
			<if test="isdel != null">
				isDel,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="id != null">
				#{id,jdbcType=INTEGER},
			</if>
			<if test="teacherId != null">
				#{teacherId,jdbcType=INTEGER},
			</if>
			<if test="courseId != null">
				#{courseId,jdbcType=INTEGER},
			</if>
			<if test="recordTime != null">
				#{recordTime,jdbcType=TIMESTAMP},
			</if>
			<if test="state != null">
				#{state,jdbcType=VARCHAR},
			</if>
			<if test="isdel != null">
				#{isdel,jdbcType=INTEGER},
			</if>
		</trim>
	</insert>
	<select id="countByExample" parameterType="com.gqzdev.learn.model.TaskExample"
		resultType="java.lang.Integer">
		select count(*) from task
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</select>
	<update id="updateByExampleSelective" parameterType="map">
		update task
		<set>
			<if test="record.id != null">
				id = #{record.id,jdbcType=INTEGER},
			</if>
			<if test="record.teacherId != null">
				teacher_id = #{record.teacherId,jdbcType=INTEGER},
			</if>
			<if test="record.courseId != null">
				course_id = #{record.courseId,jdbcType=INTEGER},
			</if>
			<if test="record.recordTime != null">
				record_time = #{record.recordTime,jdbcType=TIMESTAMP},
			</if>
			<if test="record.state != null">
				state = #{record.state,jdbcType=VARCHAR},
			</if>
			<if test="record.isdel != null">
				isDel = #{record.isdel,jdbcType=INTEGER},
			</if>
		</set>
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByExample" parameterType="map">
		update task
		set id = #{record.id,jdbcType=INTEGER},
		teacher_id = #{record.teacherId,jdbcType=INTEGER},
		course_id = #{record.courseId,jdbcType=INTEGER},
		record_time = #{record.recordTime,jdbcType=TIMESTAMP},
		state = #{record.state,jdbcType=VARCHAR},
		isDel = #{record.isdel,jdbcType=INTEGER}
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByPrimaryKeySelective" parameterType="com.gqzdev.learn.model.Task">
		update task
		<set>
			<if test="teacherId != null">
				teacher_id = #{teacherId,jdbcType=INTEGER},
			</if>
			<if test="courseId != null">
				course_id = #{courseId,jdbcType=INTEGER},
			</if>
			<if test="recordTime != null">
				record_time = #{recordTime,jdbcType=TIMESTAMP},
			</if>
			<if test="state != null">
				state = #{state,jdbcType=VARCHAR},
			</if>
			<if test="isdel != null">
				isDel = #{isdel,jdbcType=INTEGER},
			</if>
		</set>
		where id = #{id,jdbcType=INTEGER}
	</update>
	<update id="updateByPrimaryKey" parameterType="com.gqzdev.learn.model.Task">
		update task
		set teacher_id = #{teacherId,jdbcType=INTEGER},
		course_id = #{courseId,jdbcType=INTEGER},
		record_time = #{recordTime,jdbcType=TIMESTAMP},
		state = #{state,jdbcType=VARCHAR},
		isDel = #{isdel,jdbcType=INTEGER}
		where id = #{id,jdbcType=INTEGER}
	</update>

	<!-- 自定义 -->
	<insert id="saveEntity" parameterType="com.gqzdev.learn.model.Task">
		INSERT into task
		(teacher_id, course_id, record_time)
		VALUES (#{teacherId}, #{courseId},
		#{recordTime})
	</insert>

	<select id="searchEntity" resultMap="BaseResultMap">
		SELECT t.id, t.record_time,
		(SELECT name FROM teacher WHERE id = t.teacher_id) AS teacherName,
		(SELECT name FROM course WHERE id = t.course_id) AS courseName FROM
		task AS t order by id desc
	</select>

	<select id="getEntityById" parameterType="int" resultMap="BaseResultMap">
		SELECT * FROM task WHERE id = #{id}
	</select>
	
	<select id="getTaskByteacherId" parameterType="int" resultMap="BaseResultMap">
		SELECT t.id, t.record_time,	(SELECT name FROM course WHERE id = t.course_id) AS courseName FROM
		task AS t where	 t.teacher_id=#{id}  order by id desc
	</select>

	<delete id="deleteEntity" parameterType="int">
		DELETE FROM task WHERE id = #{id}
	</delete>

	<delete id="updateEntity" parameterType="com.gqzdev.learn.model.Task">
		UPDATE task SET teacher_id = #{teacherId}, course_id = #{courseId}, record_time =
		#{recordTime} WHERE id = #{id}
	</delete>
</mapper>